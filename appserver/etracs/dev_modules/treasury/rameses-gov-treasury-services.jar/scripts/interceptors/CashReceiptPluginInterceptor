import com.rameses.annotations.*;
import java.rmi.server.UID;
import com.rameses.util.*;

import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;
import vehicle.facts.*;
import com.rameses.annotations.*;
import com.rameses.util.*;

class CashReceiptPluginInterceptor {
	
	@Service(dynamic=true)
	def svc;

	@DataContext("itemaccount")
	def revenueItemEm;

	def lookupService( def svcName, def conn ) {
		def t = null;
		if( conn ) {
			t = svc.lookup(svcName, conn );
			if(!t) throw new Exception(svcName + " not found for @connection "+conn);
		}
		else {
			t = svc.lookup(svcName );
			if(!t) throw new Exception(svcName + " not found ");
		}
		return t;
	}

	//this should be thd very first to execute
	@Before(pattern="CashReceiptService.post", eval="#{args[0]?.collectiontype?.servicename != null}", index=-10000 )
	public void onPrePayment(def evt) {
		def a = evt.args[0];
		def p = a.collectiontype;
		try {
			def t = lookupService( p.servicename, p.connection );
			a.reftype = "cashreceipt";
			def r = t.prePayment( a );
			if( r ) a.putAll( r );
			
			//check if all items are intact. retrieve each item account from revenueitem
			a.items.each {
				it.item = revenueItemEm.find( [objid: it.item.objid ]).first();
			}	
		}
		catch(groovy.lang.MissingMethodException ge) {
			println "prePayment method not supported ";
		}
		catch(Exception e) {
			throw e;
		}
	}

	@After(pattern="CashReceiptService.post", eval="#{args[0]?.collectiontype?.servicename != null}", index=10000 )
	public void onPostPayment(def evt) {
		def a = evt.args[0];
		def p = a.collectiontype;
		def t = lookupService( p.servicename, p.connection );
		a.reftype = "cashreceipt";
		def rr = t.postPayment( a ); 
		if ( rr ) a.putAll( rr ); 
	}

	@After(pattern="CashReceiptVoidService.post", eval="#{result?.receipt?.collectiontype?.servicename != null}", index=10000 )
	public void onVoidPayment(def evt) {
		def a = evt.result;
		def p = a.collectiontype;
		def t = lookupService( p.servicename, p.connection );
		t.voidPayment( a );
	}

	@After(pattern="CashReceiptVoidService.revert", eval="#{result?.receipt?.collectiontype?.servicename != null}", index=10000 )
	public void afterRevert( evt ) {
		def a = evt.args[0]; 
		def p = a.collectiontype;
		def t = lookupService( p.servicename, p.connection );
		t.revertVoidPayment( a );
	}
}
